<launch>
    <!-- LAUNCH INTERFACE -->
    <arg name="gui" default="false" />
    <arg name="gazebo_gui" default="true" />
    <arg name="robot_name" default="vito"/>
    <arg name="use_rviz" default="true"/>
    <arg name="use_joint_state_publisher" default="true"/>
    <arg name="load_moveit" default="false"/>
    <arg name="use_calibration_package" default="true"/>
    <arg name="use_grasp_estimator" default="true"/>

    <!-- configure whether the real hardware is enabled or not -->
    <arg name="head_enabled" default="false"/>
    <arg name="left_arm_enabled" default="false"/>
    <arg name="left_hand_enabled" default="false"/>
    <arg name="right_arm_enabled" default="false"/>
    <arg name="right_hand_enabled" default="false"/>
    <arg name="start_openni2" default="true"/>
    <!-- choose whether or not to start the full robot simulation -->
    <arg name="use_robot_sim" default="true"/>

    <!-- LAUNCH IMPLEMENTATION -->

    <!-- #### -->

    <!-- load the full robot in robot_description, useful for visualization, collision detection and planning simultaneously -->
    <!-- the selection is only due to the hand visualization which is different in real and simulation -->
    <group if="$(arg use_robot_sim)">
        <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=false"/>
    </group>
    <group unless="$(arg use_robot_sim)">
        <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>
    </group>

    <group if="$(arg use_joint_state_publisher)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <param name="use_gui" value="$(arg gui)"/>
            <!-- listens to each part -->
            <rosparam param="source_list">[/left_arm/joint_states,/left_hand/joint_states,/right_arm/joint_states,/right_hand/joint_states,/head/joint_states]</rosparam>
        </node>
    </group>

    <param name="publish_frequency" value="100"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  />

    <!-- load hardware interface and controller configurations -->
    <rosparam command="load" file="$(find desperate_housewife)/config/vito_controllers.yaml"/>
    <rosparam command="load" file="$(find desperate_housewife)/config/hardware_interfaces.yaml"/>


    <!-- #### simulation and planning -->

    <group if="$(arg use_robot_sim)">
        <!-- Spawn the full robot into Gazebo  -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name) -x 0 -y 0 -z 1.0 -R 0 -P 0 -Y 0" respawn="false" output="screen"/>

        <!-- load Gazebo simulation environment -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find desperate_housewife)/worlds/simple_environment.world"/>
            <arg name="paused" value="false"/>
            <!-- when using the real/sim scenario in parallel, set "use_enabled_time" to false -->
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="$(arg gazebo_gui)"/>
            <arg name="headless" value="true"/>
            <arg name="debug" value="false"/>
        </include>

        <!-- calibration transformations -->
        <include file="$(find vito_description)/launch/fake_calibration.launch.xml"/>
        <include file="$(find kit_head_description)/launch/openni_axes.launch"/>

        <!-- spawn the environment in gazebo -->
        <!--param name="environment_description" command="$(find xacro)/xacro.py $(find vito_description)/robot/environment.urdf.xacro"/>
        <node name="spawn_env" pkg="gazebo_ros" type="spawn_model" args="-param environment_description -urdf -model environment -x 0 -y 0 -z 1.0 -R 0 -P 0 -Y 0" respawn="false" output="screen"/-->
    </group>

        <!-- <include file="$(find vito_description)/launch/fake_calibration.launch.xml"/> -->
        <!-- <include file="$(find kit_head_description)/launch/openni_axes.launch"/> -->
    
    <!-- calibration transformations -->
    <!-- <group unless="$(arg use_robot_sim)"> -->
        <group if="$(arg use_calibration_package)">
            <!-- it takes the last calibration performed, you can call calibrate and it will overwrite the yaml file -->
        <include file="$(find desperate_housewife)/launch/desperate_demo_asus_head_vito_broadcaster.launch">
            <arg name="start_openni2" value="$(arg start_openni2)"/>
        </include>
            <!-- for the fake eyes, which are not still included here -->
        </group>

    <!-- load moveit configuration -->
    <group if="$(arg load_moveit)">
        <include file="$(find vito_moveit_configuration)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true"/>  
            <arg name="fake_execution" value="false"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
        </include>
    </group>

    <!-- #### components -->

    <!-- controllers are launched always, since either real or simulated hardware will be present -->

    <group if="$(arg head_enabled)">
        <!--add a copy of the robot description within the name space -->
        <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>
        <include file="$(find kit_head_hw)/launch/head_hw.launch">
        </include>
       
        <!-- openni launch inclusion -->
    </group>

    <!-- load the controllers in current namespace -->
    <node ns="head" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

  <!--   <group if= "$(arg left_arm_enabled)">
        if="$(arg right_arm_enabled)"
    </group> -->




    <param name="use_both_arm" value="false"/>
    <param name="use_sh_sim" value="$(arg use_robot_sim)"/>


    <group ns="left_arm">
        <!-- <rosparam file="$(find desperate_housewife)/config/desperate_robot_real_gains.yaml" command="load"/> -->
        <group if="$(arg left_arm_enabled)">
            
            <!-- <rosparam file="$(find desperate_housewife)/config/desperate_robot_real_gains.yaml" command="load"/> -->
              <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find desperate_housewife)/config/left_arm_names.yaml" />

            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49948"/>
                <arg name="ip" value="192.168.0.20"/>
                <arg name="name" value="left_arm"/>
            </include>
            <!-- perhaps it is worth remapping joint states -->
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <node name="controller_stopper" pkg="controller_manager" type="spawner" args="--stopped PotentialFieldControlKinematicReverse PotentialFieldControlKinematicReverseEffort" output="screen"/>

    </group>
    
    <group ns="left_hand">
        <group if="$(arg left_hand_enabled)">
            <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find desperate_housewife)/config/left_hand_names.yaml" />

            <include file="$(find soft_hand_ros_control)/launch/soft_hand_hw.launch">
                <arg name="use_deafult_joint_names" value="false"/>
                <arg name="hand_id" value="1"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- grasp estimator -->
        <rosparam command="load" file="$(find grasp_state_publisher)/config/softgrasp.yaml" />
        <node name="grasp_state_publisher" pkg="grasp_state_publisher" type="grasp_state_publisher" respawn="false" output="screen" />
    </group>

    <group ns="right_arm">
        <!-- <rosparam file="$(find desperate_housewife)/config/desperate_robot_real_gains.yaml" command="load"/> -->
        <!-- <param name="use_real" value="true"/> -->
        <group if="$(arg right_arm_enabled)">
        
            <!-- <rosparam file="$(find desperate_housewife)/config/desperate_robot_real_gains.yaml" command="load"/> -->
            <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find desperate_housewife)/config/right_arm_names.yaml" />

            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49939"/>
                <arg name="ip" value="192.168.0.10"/>
                <arg name="name" value="right_arm"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller one_task_inverse_kinematics"/>

        <node name="controller_stopper" pkg="controller_manager" type="spawner" args="--stopped PotentialFieldControlKinematicReverse PotentialFieldControlKinematicReverseEffort" output="screen"/>


    </group>

    <group ns="right_hand">
        <group if="$(arg right_hand_enabled)">
            <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro.py $(find desperate_housewife)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find vito_description)/config/right_hand_names.yaml" />

            <include file="$(find soft_hand_ros_control)/launch/soft_hand_hw.launch">
                <arg name="use_deafult_joint_names" value="false"/>
                <arg name="hand_id" value="2"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- grasp estimator -->
        <rosparam command="load" file="$(find grasp_state_publisher)/config/softgrasp.yaml" />
        <node name="grasp_state_publisher" pkg="grasp_state_publisher" type="grasp_state_publisher" respawn="true" output="screen" />
    </group>

    <!-- <include file="$(find desperate_housewife)/launch/desperate_demo_scene_filter.launch"/> -->

    <!-- <include file="$(find desperate_housewife)/launch/desperate_demo_fit_geometries.launch"/> -->

    <!-- <include file="$(find desperate_housewife)/launch/Desperate_pose_filter.launch"/> -->

    <!-- <include file="$(find desperate_housewife)/launch/simulated_positions.launch"/> -->

     
    <!-- <include file="$(find desperate_housewife)/launch/main_grafo.launch"/> -->

    <!-- <node name="keyboard" pkg="keyboard" type="keyboard" respawn="true" output="screen"/> -->
    <!-- <node name="desperate_controller_keyboard" pkg="desperate_housewife" type="keycommands" respawn="true" output="screen"/> -->

    <group if="$(arg use_rviz)">
        <node name="desperate_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find desperate_housewife)/launch/rviz_config.rviz" output="screen"/>
    </group>

</launch>
